% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async.R
\name{async}
\alias{async}
\alias{async_run}
\alias{async_add}
\alias{async_fdset}
\title{Event-driven Async Requests}
\usage{
async_run(pool)

async_add(handle, done = NULL, fail = NULL, data = NULL, pool)

async_fdset(pool)
}
\arguments{
\item{pool}{A multi handle created by \link{new_pool}. This must be supplied,
and there is no default.}

\item{handle}{a curl \link{handle} with preconfigured \code{url} option.}

\item{done}{callback function for completed request. Single argument with
response data in same structure as \link{curl_fetch_memory}.}

\item{fail}{callback function called on failed request. Argument contains
error message.}

\item{data}{(advanced) callback function, file path, or connection object for writing
incoming data. This callback should only be used for \emph{streaming} applications,
where small pieces of incoming data get written before the request has completed. The
signature for the callback function is \code{write(data, final = FALSE)}. If set
to \code{NULL} the entire response gets buffered internally and returned by in
the \code{done} callback (which is usually what you want).}
}
\value{
For \code{async_run}: invisible NULL. For other functions, the return
value of their multi equivalents.
}
\description{
Async family functions are an alternative to the multi family that run
asynchronously. \code{async_run} is a threaded function that performs all
operations to completion asynchronously in a non-blocking manner. Async
functions are thread-safe versions of multi functions, and are otherwise
identical.
}
\details{
All async functions do not default to the global pool. This helps to ensure
that multi functions are not inadvertently called on pools used for async
operations. The use of async and multi functions should never be mixed as the
multi functions are not thread-safe.
}
\examples{
\dontshow{if (requireNamespace("later", quietly = TRUE) && requireNamespace("nanonext", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
success <- function(x) results <<- append(results, list(x))
failure <- function(str) cat("Failed request:", str, "\n", file = stderr())

results <- list()
pool <- curl::new_pool()

# Create handles
h1 <- new_handle(url = "https://hb.cran.dev/delay/2")
h2 <- new_handle(url = "https://hb.cran.dev/delay/1")

# Add first handle:
async_add(h1, done = success, fail = failure, pool = pool)

# Perform the requests
async_run(pool)

# Add second handle during the async request:
Sys.sleep(1)
async_add(h2, done = success, fail = failure, pool = pool)
async_fdset(pool)

# Wait for completion
Sys.sleep(3)
later::run_now()

# check both results are present
length(results)
\dontshow{\}) # examplesIf}
}
\seealso{
Multi interface: \link{multi}
}
